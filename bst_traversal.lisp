(defun key (tree-node)
  (car tree-node))

(defun left (tree-node)
  (cadr tree-node))

(defun right (tree-node)
  (caddr tree-node))

(defun insert (e tree)
  (cond ((null tree)
	 (list e `() `()))
	((= e (key tree)) tree)
	((< e (key tree))
	 (list (key tree)
	       (insert e (left tree))
	       (right tree)))
	(t (list (key tree)
		 (left tree)
		 (insert e (right tree))))))

(defun preorder (tree)
  (cond ((null tree))
	(t (format t "~a " (key tree))
	   (preorder (left tree))
	   (preorder (right tree)))))

(defun inorder (tree)
  (cond ((null tree))
	(t (inorder (left tree))
	   (format t "~a " (key tree))
	   (inorder (right tree)))))

(defun postorder (tree)
  (cond ((null tree))
	(t (postorder (left tree))
	   (postorder (right tree))
	   (format t "~a " (key tree)))))

(defun make-tree (ls)
  (labels ((make-tree-helper (ls tree)
	     (cond ((null ls) tree)
		   (t (make-tree-helper (cdr ls)
					(insert (car ls) tree))))))
    (make-tree-helper ls `())))
