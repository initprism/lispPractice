(defparameter *HEAPSIZE* 100)

(defstruct HeapType
  (heap (make-array *HEAPSIZE* :initial-element -1))
  (heap-size 0))

(defun insert-maxheap (h item)
  (let ((i (incf (heaptype-heap-size h))))
    (loop while (and (not (= i 1)) (> item (aref (heaptype-heap h) (truncate i 2))))
       do (setf (aref (heaptype-heap h) i)(aref (heaptype-heap h) (truncate i 2)))
	   (setf i (truncate i 2)))
    (setf (aref (heaptype-heap h) i) item)))

(defun delete-maxheap (h)
  (let ((parent 1) (child 2) (item (aref (heaptype-heap h) 1))
	(temp (aref (heaptype-heap h) (heaptype-heap-size h))))
    (decf (heaptype-heap-size h))
    (loop while (<= child (heaptype-heap-size h))
       do (if (and (< child (heaptype-heap-size h))
		   (< (aref (heaptype-heap h) child)
		      (aref (heaptype-heap h) (1+ child))))
	      (incf child))
	 (if (>= temp (aref (heaptype-heap h) child))
	      (return))
	 (setf (aref (heaptype-heap h) parent) (aref (heaptype-heap h) child))
	 (setf parent child)
	 (setf child (* 2 child))
	 )
    (setf (aref (heaptype-heap h) parent) temp)
    (setf (aref (heaptype-heap h) (+ (heaptype-heap-size h) 1)) -1)
    item))

(defun preorder (h)
  (labels ((helper (h root)
	     (format t "~a " (aref (heaptype-heap h) root))
	     (if (not (= (aref (heaptype-heap h) (* root 2)) -1))
		 (helper h (* 2 root)))
	     (if (not (= (aref (heaptype-heap h) (+ (* root 2) 1)) -1))
		 (helper h (+ (* 2 root) 1)))))
    (helper h 1)))
    
(defun inorder (h)
  (labels ((helper (h root)
	     (if (not (= (aref (heaptype-heap h) (* root 2)) -1))
		 (helper h (* 2 root)))
	     (format t "~a " (aref (heaptype-heap h) root))
	     (if (not (= (aref (heaptype-heap h) (+ (* root 2) 1)) -1))
		 (helper h (+ (* 2 root) 1)))))
    (helper h 1)))

(defun postorder (h)
  (labels ((helper (h root)
	     (if (not (= (aref (heaptype-heap h) (* root 2)) -1))
		 (helper h (* 2 root)))
	     (if (not (= (aref (heaptype-heap h) (+ (* root 2) 1)) -1))
		 (helper h (+ (* 2 root) 1)))
	     (format t "~a " (aref (heaptype-heap h) root))))
    (helper h 1)))
